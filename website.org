
* Working on version 0
** <2020-07-16>
*** TODO create homepage
**** DONE put welcome text
#+begin_src important
Notes from today 
*bold*
#+end_src

*** DONE create navbar
** <2020-07-17>
*** TODO Format cards
*** TODO Put different pages for each category 
*** TODO Put links to different pages and add nav bar on all those pages
*** TODO Add bottom nav bar?
** <2020-08-10> 
*** TODO Figure out App Script
*** TODO Write script to extract headers 
** <2020-08-11>
*** TODO Put links corresponding the headers on their respective pages
#+begin_src learnings

*Packages I installed*

1. web-mode

2. company-web

3. yasnippet

4. emmet-mode

5. added hooks and set indentations and other settings in .emacs file

6. added this to .emacs file for live server functionality:

(require 'simple-httpd)

(setq httpd-root "/Users/zintan/magali-project")

But this setq did not work so I did "M-x httpd-serve-directory" and chose the directory "/Users/zintan/magali-project"

 

*How to run the website from emacs*

1. Make changes to your file

2. Run M-x httpd-start

3. Open the file you want to checkout by going to http://localhost:8080/NAMEOFFILE.html

 

*Setting up Flask*

Working with python and js files using flask (at this point, I am no longer using httpd)

link to video: https://www.youtube.com/watch?v=HYO6GNOJMmQ

 

*Communicating between python file and js file*

link to blog: https://healeycodes.com/javascript/python/beginners/webdev/2019/04/11/talking-between-languages.html

 

*Module for other people to follow*

1. Create file system with the following structure

   - project (any name - cs-resources )

       - app.py (app.py preferable)

       - templates

           - index.html (any name)

       - static

           - script.js

2. Set up Flask in app.py (watch youtube video. link: https://www.youtube.com/watch?v=HYO6GNOJMmQ ). Be comfortable with running app on local host through flask.

   - pip install flask

3. Link app.py to script.js (Intro to JS Promises. Use the link to the blog as a resource: https://healeycodes.com/javascript/python/beginners/webdev/2019/04/11/talking-between-languages.html)

4. Import ezsheets to app.py and use it to access Google sheet. (link: https://automatetheboringstuff.com/2e/chapter14/)

5. Be able to display fetched information onto homepage using script.js.

 

6. Figure out how to deploy this app (For me)

#+end_src

* <2020-08-11>

** DONE Set up web server and web files on emacs

** DONE Run a function from script.js

** DONE Set up flask on the python file in emacs

** DONE Work through other examples presented in tutorial for python-to-js communication.

** DONE Start working through tutorial for using ezsheets.

* <2020-08-12>

** DONE finish proof of concept for using sheets as a database for web app

** DONE Make module for Magali to follow.

** TODO Look for resources on how to deploy the web application.

** TODO Work on data cleaning of the Spreadsheet while Magali goes through the module.

** TODO Think about ways to write documentation for the site.
* <2020-08-20>
** DONE Organize data
** TODO Look into how to GET data using https://my.linkpreview.net/documentation
** DONE Display the categories in the cards
* <2020-08-22>
** DONE Create separate pages for each category
** DONE Fetch data for each category on said page (passing in arguments through html)
** DONE Working CSS design for home page
* <2020-08-23>
** TODO Create drop down menu
** TODO Clean up rest of  home page design/layoout 
** TODO Deploy
#+begin_src dead code

/* ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
 
}

ul li {
  float: left;
}

li a {
  display: block;
  color: orangered;
  text-align: center;
  padding: 14px 16px;
  font-size: 18px;
  text-decoration: none;
} */

/* li a:hover:not(.active) {
  background-color: #A1DE93;
}

li a.active {
  background-color: #A1DE93;
}

li {
  border-right: 1px solid #bbb;
} */

/* a {
  text-decoration: none;
} */
/* ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
 
}

ul li {
  float: left;
}

li a {
  display: block;
  color: orangered;
  text-align: center;
  padding: 14px 16px;
  font-size: 18px;
  text-decoration: none;
} */

/* li a:hover:not(.active) {
  background-color: #A1DE93;
}

li a.active {
  background-color: #A1DE93;
}

li {
  border-right: 1px solid #bbb;
} */

/* a {
  text-decoration: none;
} */

.card1 {
  text-align: center;
  box-shadow: 0 8px 14px 0 rgba(0, 0, 0, 0.2);
  padding: 20px;
  transition: 0.2s;
  background-color: #B29DD9;
}

.card1:hover {
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.5);
}

.card2 {
  text-align: center;
  box-shadow: 0 8px 14px 0 rgba(0, 0, 0, 0.2);
  padding: 20px;
  transition: 0.2s;
  background-color: #FE6B64;
}

.card2:hover {
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.5);
}

# #@app.route('/app')
# def getAllData():
#   result = {}
#   #instantiate a sheet
  
#   #when the info has been updated on the sheet, update on site
#   ss.refresh()
#   sheets = ss.sheetTitles
#   #cols = ws.getColumns()
#   #headings = rows[0]
#   #i = 0

#   for s in range(1, len(sheets)): 
#     sheet = ss[s]
#     result[sheets[s]] = []
#     rows = sheet.getRows()
#     j = 2
#     while sheet.getRow(j)[0] != '' or sheet.getRow(j)[1] != '':
#       #get the first and second values in each row
#       #first representing the org, second representing the link
#       result[sheets[s]].append((sheet.getRow(j)[0], sheet.getRow(j)[1]))

#       j += 1


  # while headings[i] != '':
  #   #create a dictionary key for each header
  #   header = headings[i]
  #   result[header] = []

  #   j = 1
  #   col = ws.getColumn(i + 1)
  #   while col[j] != '':
  #     result[header].append(col[j])
  #     j+=1
  #   i += 1
  #return result

# get the sheet
  result = {}
  ss.refresh()
  ws = ss[str(sheetName)]
  #rows = ws.getRows()
  # start from below the headings
  j = 2
  while ws.getRow(j)[0] != '' or ws.getRow(j)[1] != '':
    #get the first and second values in each row
    #first representing the org, second representing the link
    result[ws.getRow(j)[0]] = ws.getRow(j)[1]

    j += 1
#+end_src 

